{"version":3,"sources":["../src/API.js","../src/components/Student.js","../src/App.js"],"names":["API","get","URL","Promise","resolve","reject","fetch","then","res","json","data","catch","error","console","log","CreateDatabase","studentTable","tableName","columnsName","Conn","SQL","Database","CreateTable","createTable","run","err","message","student","name","rollno","course","students","forEach","InsertOne","id","query","record","prepare","step","records","push","updatingString","colAndValue","split","columnName","updatingValue","exec","GetAllRecords","localStorage","setItem","JSON","stringify","Student","document","querySelectorAll","td","addEventListener","e","HandleClickedEvent","target","classList","contains","innerHTML","textContent","add","clickedElement","getAttribute","IsModified","tagName","parentNode","Save","Cancel","NotifyIfNotSave","querySelector","input","childNodes","value","confirm","index","row","itemIndex","updatedValue","isNaN","UpdateRow","parseInt","UpdateLocalStorage","remove","ShowMessage","addClass","msg","msgBox","style","display","opacity","setTimeout","getElementById","btnSc","ButtonProperties","cursorMode","isDisabled","cursor","disabled","getItem","InsertIntoTables","parse","InsertMany","ChangeColums","section","removeChild","thead","createElement","appendChild","LoadHeading","tbody","LoadStudentInfo","rollNo","header","LoadStudentData","removeItem"],"mappings":"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","file":"App.08be7247.js","sourceRoot":"../public","sourcesContent":["export const API = {\n  get: function(URL) {\n    return new Promise((resolve, reject) => {\n      fetch(URL)\n      .then(res => res.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch((error) => {\n        console.log(error);       \n      })\n    });\n  }\n\n}\n\n","import { API } from '../API';\n\nlet studentTable = \"\";\n\nclass CreateDatabase {\n  constructor(tableName, columnsName) {\n    this.Conn = new SQL.Database();        \n    this.tableName = tableName;\n    this.columnsName = columnsName;\n    this.CreateTable();\n  }\n\n  CreateTable() {\n    try {\n      const createTable = `create table ${this.tableName}(${this.columnsName[0]} text NOT NULL, ${this.columnsName[1]} int primary key, ${this.columnsName[2]} varchar(3) NOT NULL, CHECK (${this.columnsName[2]} in ('MCA','MSc')))`;\n   \n      this.Conn.run(createTable);\n      console.log(`${this.tableName} table has been created`);\n    }\n    catch(err) {\n      console.log(err.message);\n    }\n  }\n\n  InsertOne(student) {\n    try {\n      this.Conn.run(`insert into ${this.tableName} values(\"${student.name}\", ${student.rollno}, \"${student.course}\")`);\n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  InsertMany(students) {\n    students.forEach((student) => {\n      this.InsertOne(student);\n    })\n  }\n\n  GetRecordById(id) {\n    try{\n      const query = `select * from ${this.tableName} where rollno=${id}`;\n      const record = this.Conn.prepare(query);\n      if (!record.step()) {\n        console.log(\"No such record present in the table\");\n        return\n      }\n      \n      console.log(record.get());\n      \n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  GetRecordByName(name) {\n    try{\n      const query = `select * from ${this.tableName} where name=\"${name}\"`;\n      const record = this.Conn.prepare(query);\n      if (!record.step()) {\n        console.log(\"No such record present in the table\");\n        return\n      }\n      \n      while (record.step()) {\n        console.log(record.get());\n      }\n      \n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  GetAllRecords() {\n    try {\n      const query = `select * from ${this.tableName}`;      \n      const records = this.Conn.prepare(query);\n      var students = []\n      while (records.step()) {      \n        const record = records.get()\n        let student = {\n          name: record[0],\n          rollno: record[1],\n          course: record[2]\n        }\n\n        students.push(student);\n      }            \n      return students;\n    } \n    catch(error) {\n      console.log(error.message);\n    }\n    \n  }\n\n  UpdateRow(id, updatingString) {\n    try {\n     \n      const colAndValue = updatingString.split(\"=\");\n      const columnName = colAndValue[0];\n      const updatingValue =colAndValue[1];      \n      \n\n      const query = `update ${this.tableName} set ${columnName}=${updatingValue} where rollno=${id}`;\n      console.log(query);\n      const record = this.Conn.exec(query);\n    }\n    catch(err) {\n      console.log(err.message);\n      return \"\"\n    }\n    \n\n  }\n\n  UpdateLocalStorage() {\n    const students = this.GetAllRecords();\n    if (students == \"\") {\n      console.log(\"No record is available\");      \n    }\n    else {      \n      localStorage.setItem(\"students\",JSON.stringify(students));      \n    }\n  }\n\n}\n\nexport default class Student extends CreateDatabase{\n\n  constructor(tableName, columnsName) {   \n    super(tableName, columnsName);\n  }\n  \n  static ChangeColums() {\n    const tds = document.querySelectorAll(\"#student-table td\");\n    tds.forEach((td) => {\n      td.addEventListener(\"click\", (e) => {\n        Student.HandleClickedEvent(e.target)\n        if(!e.target.classList.contains(\"changing\")) {           \n          e.target.innerHTML = `<input type=\"text\" value=\"${e.target.textContent}\" id=\"inputText\">`;\n          e.target.innerHTML += `<div class=\"action-buttons\"><button id=\"save\" class=\"success\" disabled><i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i></button><button id=\"cancel\" class=\"danger\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n          </button></div>`;\n          e.target.classList.add(\"changing\");\n        }\n      })                \n    })\n  }\n\n  static HandleClickedEvent(clickedElement) {\n        \n    if (clickedElement != null && clickedElement.getAttribute(\"value\")) {\n      Student.IsModified();     \n      return\n    }\n    else if((clickedElement && clickedElement.getAttribute(\"id\")==\"save\") || ((clickedElement.tagName == \"I\") &&  clickedElement.parentNode.getAttribute(\"id\")==\"save\")) {\n      Student.Save()\n    }\n    else if ((clickedElement && clickedElement.getAttribute(\"id\")==\"cancel\") || ((clickedElement.tagName == \"I\") &&  clickedElement.parentNode.getAttribute(\"id\")==\"cancel\")) {\n      Student.Cancel()      \n    }\n    else if(clickedElement.tagName==\"TD\" && !clickedElement.classList.contains(\"changing\")) {      \n      Student.NotifyIfNotSave();\n      Student.Cancel()\n    }\n    \n  }\n  \n  static NotifyIfNotSave() {\n    const td = document.querySelector(\"tbody td.changing\");\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    if (input.value != input.getAttribute(\"value\")) {\n      if(confirm(\"Changes are not saved, do you want to save?\")) {\n        Student.Save();\n      }\n      else {\n        Student.Cancel();\n      }\n    }\n    \n  }\n\n  static Save() {\n\n    \n\n    const td = document.querySelector(\"tbody td.changing\");\n    let index = -1\n\n    td.parentNode.childNodes.forEach((row, itemIndex) => {\n      if (row.classList.contains(\"changing\")) {\n        index = itemIndex;        \n      }\n    });\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    \n\n    let updatedValue =``;\n\n    if(isNaN(input.value)) {\n      updatedValue = `${studentTable.columnsName[index]}=\"${input.value}\"`;\n      studentTable.UpdateRow(parseInt(td.parentNode.childNodes[1].textContent), updatedValue);      \n    }\n    else {\n      updatedValue = `${studentTable.columnsName[index]}=${input.value}`;      \n      studentTable.UpdateRow(parseInt(input.getAttribute(\"value\")), updatedValue);\n    }\n   \n    studentTable.UpdateLocalStorage();\n\n    \n    td.textContent = input.value;\n    td.classList.remove(\"changing\");\n\n    const message = {\n      addClass: \"success\",\n      msg: \"Record has been successfully updated\"      \n    }\n\n    Student.ShowMessage(message)   \n  }\n\n  static Cancel() {\n    const td = document.querySelector(\"tbody td.changing\");\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    td.textContent = input.getAttribute(\"value\");\n    td.classList.remove(\"changing\");\n\n\n    if(input.value == input.getAttribute(\"value\"))\n      return;\n\n    const message = {\n      addClass: \"danger\",\n      msg: \"You cancelled updating record\"      \n    }\n\n    Student.ShowMessage(message)\n  }\n\n  static ShowMessage(message) {\n    const msgBox = document.querySelector(\".msg-box\");\n    msgBox.classList.add(message.addClass);\n    msgBox.innerHTML = message.msg;\n    \n    msgBox.style.display = \"block\";\n    msgBox.style.opacity = \"1\";\n\n    setTimeout(()=> {\n      msgBox.style.opacity = \"0\";\n      msgBox.classList.remove(message.addClass);\n      msgBox.style.display = \"none\";\n    },2000);\n  }\n\n  static IsModified() {\n    const input = document.getElementById(\"inputText\");\n    const btnSc = document.getElementById(\"save\");\n    if (input) {\n      input.addEventListener(\"keyup\", ()=> {\n\n        if(input.value !== input.getAttribute(\"value\")) {\n          Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n        }\n        else {          \n          Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true);         \n        }\n      })\n    }\n  }\n\n  static ButtonProperties(btnSc, opacity, cursorMode, isDisabled) {\n    btnSc.style.opacity = opacity;\n    btnSc.style.cursor = cursorMode;\n    btnSc.disabled = isDisabled;\n  }\n  \n  static LoadStudentData() {\n    \n    studentTable = new Student(\"students\", [\"name\", \"rollno\", \"course\"]);\n    const URL = \"http://localhost:8080/api/students\";\n\n    \n    if (localStorage.getItem(\"students\")) {\n      Student.InsertIntoTables(JSON.parse(localStorage.getItem(\"students\")));\n      studentTable.InsertMany(JSON.parse(localStorage.getItem(\"students\")));\n      console.log(\"Loading from localStorage\");\n      Student.ChangeColums();\n    }\n      \n    else {\n\n      API.get(URL)\n      .then((data) => {\n        studentTable.InsertMany(data);\n        localStorage.setItem(\"students\",JSON.stringify(data));                  \n        Student.InsertIntoTables(data);\n        console.log(\"Loading from API\");\n        Student.ChangeColums();\n      });\n    }\n        \n  }\n\n  static InsertIntoTables(data) {\n    const section = document.getElementById(\"student-table\");\n    document.querySelector(\".wrapper-loader\").parentNode.removeChild(document.querySelector(\".wrapper-loader\"));\n      \n    const thead = document.createElement(\"thead\");    \n    thead.appendChild(Student.LoadHeading());      \n    section.appendChild(thead);\n\n    const tbody = document.createElement(\"tbody\");\n\n    data.forEach((student) => {\n      tbody.appendChild(Student.LoadStudentInfo(student));\n    })\n    section.appendChild(tbody);\n  }\n\n  static LoadStudentInfo(student) {    \n   \n    var row = document.createElement(\"tr\");\n\n    var name = document.createElement(\"td\")\n    name.textContent = student.name;\n\n    var rollNo = document.createElement(\"td\");\n    rollNo.textContent = student.rollno;\n\n    var course = document.createElement(\"td\");\n    course.textContent = student.course;\n\n    [name, rollNo, course].forEach((e) => {\n      row.appendChild(e);\n    })\n\n    return row;\n  }\n\n  static LoadHeading() {\n    const row = document.createElement(\"tr\");\n    const headers = [\"name\", \"rollno\", \"course\"];\n      \n    headers.forEach(header => {\n      var td = document.createElement(\"th\");\n      td.textContent = header;\n      row.appendChild(td);\n    });\n\n    return row\n  }\n\n}","import './css/main.css';\nimport Student from './components/Student';\n\nStudent.LoadStudentData();\n\nsetTimeout(() => {\n  if (localStorage.getItem(\"students\")) {\n    localStorage.removeItem(\"students\")\n    console.log(\"removed element from localStorage..\");\n    console.log(localStorage.getItem(\"students\"));\n  }\n}, 1000*60);\n"]}