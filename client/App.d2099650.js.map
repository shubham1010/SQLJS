{"version":3,"sources":["../src/API.js","../src/components/CreateDatabase.js","../src/components/Student.js","../src/App.js"],"names":["API","get","URL","Promise","resolve","reject","fetch","then","res","json","data","catch","error","console","log","post","options","method","body","JSON","stringify","CreateDatabase","tableName","columnsName","Conn","SQL","Database","CreateTable","createTable","run","err","message","student","name","rollno","course","students","forEach","InsertOne","id","query","record","prepare","step","records","push","updatingString","colAndValue","split","columnName","updatingValue","exec","GetAllRecords","localStorage","setItem","studentTable","Student","tds","td","addEventListener","e","HandleClickedEvent","target","classList","contains","innerHTML","textContent","add","clickedElement","getAttribute","IsModified","tagName","parentNode","Save","Cancel","NotifyIfNotSave","document","querySelector","input","childNodes","value","confirm","index","row","itemIndex","updatedValue","isNaN","UpdateRow","parseInt","UpdateLocalStorage","remove","ShowMessage","addClass","msg","msgBox","style","display","opacity","setTimeout","getElementById","btnSc","ButtonProperties","cursorMode","isDisabled","cursor","disabled","getItem","InsertMany","parse","InsertIntoTables","querySelectorAll","ChangeColums","section","removeChild","thead","createElement","LoadHeading","tr","appendChild","AddNewRow","tbody","LoadStudentInfo","rollNo","el","header","addRow","response","content","insertNewRow","buttons","child","insertBefore","tableBox","IsModifiedText","RemoveInsertingElements","SaveInsertedValues","textFields","RemoveInsertingButtons","newtds","cancelButtons","cancelInserting","length","IsValidRollNumber","rollnumber","includes","LoadStudentData","removeItem","SendStudentsData"],"mappings":";;;;;AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,IAAMA,EAAM,CACjBC,IAAK,SAASC,GACL,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAMJ,GACLK,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GACJN,EAAQM,KAETC,MAAM,SAACC,GACNC,QAAQC,IAAIF,QAKlBG,KAAM,SAASb,EAAKQ,GACX,OAAA,IAAIP,QAAQ,SAACC,EAASC,GACrBW,IAAAA,EAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,IAEvBJ,MAAMJ,EAAKc,GACVT,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GACJN,EAAQM,KAETC,MAAM,SAACC,GACNC,QAAQC,IAAIF,SA1Bb,QAAA,IAAA;;AC6HJ,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7HkBS,IAAAA,EAAAA,WACPC,SAAAA,EAAAA,EAAWC,GAAa,EAAA,KAAA,GAC7BC,KAAAA,KAAO,IAAIC,IAAIC,SACfJ,KAAAA,UAAYA,EACZC,KAAAA,YAAcA,EACdI,KAAAA,cAwHN,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cArHa,MAAA,WACR,IACIC,IAAAA,EAA8B,gBAAA,OAAA,KAAKN,UAAa,KAAA,OAAA,KAAKC,YAAY,GAAqB,oBAAA,OAAA,KAAKA,YAAY,GAAuB,sBAAA,OAAA,KAAKA,YAAY,GAAkC,iCAAA,OAAA,KAAKA,YAAY,GAAxM,uBAEKC,KAAAA,KAAKK,IAAID,GACdf,QAAQC,IAAO,GAAA,OAAA,KAAKQ,UAApB,4BAEF,MAAMQ,GACJjB,QAAQC,IAAIgB,EAAIC,YA6GnB,CAAA,IAAA,YAzGSC,MAAAA,SAAAA,GACJ,IACGR,KAAAA,KAAKK,IAAmB,eAAA,OAAA,KAAKP,UAAqBU,aAAAA,OAAAA,EAAQC,KAAUD,OAAAA,OAAAA,EAAQE,OAAYF,OAAAA,OAAAA,EAAQG,OAArG,OAEF,MAAML,GACJjB,QAAQC,IAAIgB,EAAIC,YAoGnB,CAAA,IAAA,aA/FUK,MAAAA,SAAAA,GAAU,IAAA,EAAA,KAEnBA,EAASC,QAAQ,SAACL,GAChB,EAAKM,UAAUN,OA4FlB,CAAA,IAAA,gBAxFaO,MAAAA,SAAAA,GACT,IACKC,IAAAA,EAAyB,iBAAA,OAAA,KAAKlB,UAA0BiB,kBAAAA,OAAAA,GACxDE,EAAS,KAAKjB,KAAKkB,QAAQF,GAC7B,IAACC,EAAOE,OAEV,YADA9B,QAAQC,IAAI,uCAIdD,QAAQC,IAAI2B,EAAOxC,OAGrB,MAAM6B,GACJjB,QAAQC,IAAIgB,EAAIC,YA2EnB,CAAA,IAAA,kBAtEeE,MAAAA,SAAAA,GACX,IACKO,IAAAA,EAAyB,iBAAA,OAAA,KAAKlB,UAAyBW,iBAAAA,OAAAA,EAA7D,KACMQ,EAAS,KAAKjB,KAAKkB,QAAQF,GAC7B,IAACC,EAAOE,OAEV,YADA9B,QAAQC,IAAI,uCAIP2B,KAAAA,EAAOE,QACZ9B,QAAQC,IAAI2B,EAAOxC,OAIvB,MAAM6B,GACJjB,QAAQC,IAAIgB,EAAIC,YAuDnB,CAAA,IAAA,gBAlDe,MAAA,WACV,IAIKa,IAHDJ,IAAAA,EAAyB,iBAAA,OAAA,KAAKlB,WAC9BsB,EAAU,KAAKpB,KAAKkB,QAAQF,GAC9BJ,EAAW,GACRQ,EAAQD,QAAQ,CACfF,IAAAA,EAASG,EAAQ3C,MACnB+B,EAAU,CACZC,KAAMQ,EAAO,GACbP,OAAQO,EAAO,GACfN,OAAQM,EAAO,IAGjBL,EAASS,KAAKb,GAETI,OAAAA,EAET,MAAMxB,GACJC,QAAQC,IAAIF,EAAMmB,YAgCrB,CAAA,IAAA,YA3BSQ,MAAAA,SAAAA,EAAIO,GACR,IAEIC,IAAAA,EAAcD,EAAeE,MAAM,KACnCC,EAAaF,EAAY,GACzBG,EAAeH,EAAY,GAE3BP,EAAkB,UAAA,OAAA,KAAKlB,UAAiB2B,SAAAA,OAAAA,EAAcC,KAAAA,OAAAA,EAA8BX,kBAAAA,OAAAA,GAC1F1B,QAAQC,IAAI0B,GACG,KAAKhB,KAAK2B,KAAKX,GAEhC,MAAMV,GAEG,OADPjB,QAAQC,IAAIgB,EAAIC,SACT,MAcV,CAAA,IAAA,qBARoB,MAAA,WACbK,IAAAA,EAAW,KAAKgB,gBACN,IAAZhB,EACFvB,QAAQC,IAAI,0BAGZuC,aAAaC,QAAQ,WAAWnC,KAAKC,UAAUgB,QAElD,EA7HkBf,GA6HlB,QAAA,QAAA;;ACxHkCA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EALrC,IAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,qBAIqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,OAAAA,WAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,MAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,EAAAA,KAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,IAAAA,GAAAA,oBAAAA,UAAAA,QAAAA,UAAAA,OAAAA,EAAAA,GAAAA,QAAAA,UAAAA,KAAAA,OAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,OAAAA,EAAAA,IAAAA,OAAAA,KAAAA,UAAAA,SAAAA,KAAAA,QAAAA,UAAAA,KAAAA,GAAAA,gBAAAA,EAAAA,MAAAA,GAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAFrC,IAAIkC,EAAe,GAEEC,EAAAA,SAAAA,GAAgBnC,EAAAA,EAAAA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAEvBC,SAAAA,EAAAA,EAAWC,GACfD,OAD4B,EAAA,KAAA,GAC5BA,EAAAA,KAAAA,KAAAA,EAAWC,GAHgBF,OAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,eAMfoC,MAAAA,SAAAA,GAClBA,EAAIpB,QAAQ,SAACqB,GACXA,EAAGC,iBAAiB,QAAS,SAACC,GAC5BJ,EAAQK,mBAAmBD,EAAEE,QACzBF,EAAEE,OAAOC,UAAUC,SAAS,cAC9BJ,EAAEE,OAAOG,UAAyCL,6BAAAA,OAAAA,EAAEE,OAAOI,YAA3D,8BACAN,EAAEE,OAAOG,WAAT,6PAEAL,EAAEE,OAAOC,UAAUI,IAAI,mBAdI9C,CAAAA,IAAAA,qBAoBT+C,MAAAA,SAAAA,GAEF,MAAlBA,GAA0BA,EAAeC,aAAa,SACxDb,EAAQc,aAGDF,GAAqD,QAAnCA,EAAeC,aAAa,OAA8C,KAA1BD,EAAeG,SAAkE,QAA9CH,EAAeI,WAAWH,aAAa,MACnJb,EAAQiB,OAEAL,GAAqD,UAAnCA,EAAeC,aAAa,OAAgD,KAA1BD,EAAeG,SAAkE,UAA9CH,EAAeI,WAAWH,aAAa,MACtJb,EAAQkB,SAEsB,MAAxBN,EAAeG,SAAkBH,EAAeL,UAAUC,SAAS,cACzER,EAAQmB,kBACRnB,EAAQkB,YAlCuBrD,CAAAA,IAAAA,kBAuCV,MAAA,WACjBqC,IAAAA,EAAKkB,SAASC,cAAc,qBAC/BnB,GAAM,MAANA,EAAAA,CAEGoB,IAAAA,EAAQpB,EAAGqB,WAAW,GACxBD,EAAME,OAASF,EAAMT,aAAa,WACjCY,QAAQ,+CACTzB,EAAQiB,OAGRjB,EAAQkB,aAjDqBrD,CAAAA,IAAAA,OAuDrB,MAAA,WAENqC,IAAAA,EAAKkB,SAASC,cAAc,qBAC9BK,GAAS,EAOVxB,GALHA,EAAGc,WAAWO,WAAW1C,QAAQ,SAAC8C,EAAKC,GACjCD,EAAIpB,UAAUC,SAAS,cACzBkB,EAAQE,KAGH,MAAN1B,EAAAA,CAEGoB,IAAAA,EAAQpB,EAAGqB,WAAW,GAGxBM,EAAJ,GAEGC,MAAMR,EAAME,QACbK,EAAkB9B,GAAAA,OAAAA,EAAahC,YAAY2D,GAAWJ,MAAAA,OAAAA,EAAME,MAA5D,KACAzB,EAAagC,UAAUC,SAAS9B,EAAGc,WAAWO,WAAW,GAAGb,aAAcmB,KAG1EA,EAAkB9B,GAAAA,OAAAA,EAAahC,YAAY2D,GAAUJ,KAAAA,OAAAA,EAAME,OAC3DzB,EAAagC,UAAUC,SAASV,EAAMT,aAAa,UAAWgB,IAGhE9B,EAAakC,qBAGb/B,EAAGQ,YAAcY,EAAME,MACvBtB,EAAGK,UAAU2B,OAAO,YAOpBlC,EAAQmC,YALQ,CACdC,SAAU,UACVC,IAAK,4CAzF0BxE,CAAAA,IAAAA,SA+FnB,MAAA,WACRqC,IAAAA,EAAKkB,SAASC,cAAc,qBAC/BnB,GAAM,MAANA,EAAAA,CAEGoB,IAAAA,EAAQpB,EAAGqB,WAAW,GAKzBD,GAJHpB,EAAGQ,YAAcY,EAAMT,aAAa,SACpCX,EAAGK,UAAU2B,OAAO,YAGjBZ,EAAME,OAASF,EAAMT,aAAa,SAAlCS,CAQHtB,EAAQmC,YALQ,CACdC,SAAU,SACVC,IAAK,sCA7G0BxE,CAAAA,IAAAA,cAmHhBU,MAAAA,SAAAA,GACX+D,IAAAA,EAASlB,SAASC,cAAc,YACtCiB,EAAO/B,UAAUI,IAAIpC,EAAQ6D,UAC7BE,EAAO7B,UAAYlC,EAAQ8D,IAE3BC,EAAOC,MAAMC,QAAU,QACvBF,EAAOC,MAAME,QAAU,IAEvBC,WAAW,WACTJ,EAAOC,MAAME,QAAU,IACvBH,EAAO/B,UAAU2B,OAAO3D,EAAQ6D,UAChCE,EAAOC,MAAMC,QAAU,QACvB,OA/H+B3E,CAAAA,IAAAA,aAkIf,MAAA,WACZyD,IAAAA,EAAQF,SAASuB,eAAe,aAChCC,EAAQxB,SAASuB,eAAe,QAElCrB,GACFA,EAAMnB,iBAAiB,QAAS,WAC3BmB,EAAME,QAAUF,EAAMT,aAAa,SACpCb,EAAQ6C,iBAAiBD,EAAO,IAAK,WAAW,GAGhD5C,EAAQ6C,iBAAiBD,EAAO,MAAO,eAAe,OA5I3B/E,CAAAA,IAAAA,mBAkJX+E,MAAAA,SAAAA,EAAOH,EAASK,EAAYC,GAClDH,EAAML,MAAME,QAAUA,EACtBG,EAAML,MAAMS,OAASF,EACrBF,EAAMK,SAAWF,IArJgBlF,CAAAA,IAAAA,kBAwJV,MAAA,WAEvBkC,EAAe,IAAIC,EAAQ,WAAY,CAAC,OAAQ,SAAU,WAItDH,GAAAA,aAAaqD,QAAQ,YAAa,CACpCnD,EAAaoD,WAAWxF,KAAKyF,MAAMvD,aAAaqD,QAAQ,cACxDlD,EAAQqD,iBAAiB1F,KAAKyF,MAAMvD,aAAaqD,QAAQ,cACzD7F,QAAQC,IAAI,6BACN2C,IAAAA,EAAMmB,SAASkC,iBAAiB,qBACtCtD,EAAQuD,aAAatD,QAKjBxD,EAAAA,IAAAA,IAbM,sCAcTM,KAAK,SAACG,GACL2C,aAAaC,QAAQ,WAAWnC,KAAKC,UAAUV,IAC/C6C,EAAaoD,WAAWjG,GACxB8C,EAAQqD,iBAAiBtD,EAAaH,iBACtCvC,QAAQC,IAAI,oBACN2C,IAAAA,EAAMmB,SAASkC,iBAAiB,qBACtCtD,EAAQuD,aAAatD,OA/KQpC,CAAAA,IAAAA,mBAqLXX,MAAAA,SAAAA,GAChBsG,IAAAA,EAAUpC,SAASuB,eAAe,iBACxCvB,SAASC,cAAc,mBAAmBL,WAAWyC,YAAYrC,SAASC,cAAc,oBAElFqC,IAAAA,EAAQtC,SAASuC,cAAc,SACrC3D,EAAQ4D,cAAc/E,QAAQ,SAAAgF,GAC5BH,EAAMI,YAAYD,KAEpBL,EAAQM,YAAYJ,GACpBtC,SAASuB,eAAe,aAAaxC,iBAAiB,QAAS,WAC7DH,EAAQ+D,cAGJC,IAAAA,EAAQ5C,SAASuC,cAAc,SAErCzG,EAAK2B,QAAQ,SAACL,GACZwF,EAAMF,YAAY9D,EAAQiE,gBAAgBzF,MAE5CgF,EAAQM,YAAYE,KAvManG,CAAAA,IAAAA,kBA4MZW,MAAAA,SAAAA,GAEfmD,IAAAA,EAAMP,SAASuC,cAAc,MAE7BlF,EAAO2C,SAASuC,cAAc,MACpClF,EAAKiC,YAAclC,EAAQC,KAErByF,IAAAA,EAAS9C,SAASuC,cAAc,MACtCO,EAAOxD,YAAclC,EAAQE,OAEvBC,IAAAA,EAASyC,SAASuC,cAAc,MAO/BhC,OANPhD,EAAO+B,YAAclC,EAAQG,OAE5BF,CAAAA,EAAMyF,EAAQvF,GAAQE,QAAQ,SAACsF,GAC9BxC,EAAImC,YAAYK,KAGXxC,IA7N0B9D,CAAAA,IAAAA,cAgOd,MAAA,WACb8D,IAAAA,EAAMP,SAASuC,cAAc,MACnB5D,EAAahC,YAErBc,QAAQ,SAAAuF,GACVlE,IAAAA,EAAKkB,SAASuC,cAAc,MAChCzD,EAAGQ,YAAc0D,EACjBzC,EAAImC,YAAY5D,KAGZmE,IAAAA,EAASjD,SAASuC,cAAc,MAG/B,OAFPU,EAAO5D,UAAP,wHAEO,CAACkB,EAAK0C,KA7OoBxG,CAAAA,IAAAA,mBAgPT,MAAA,WAClBnB,IACAQ,EAAO6C,EAAaH,gBACtBrC,EAAAA,IAAAA,KAFQ,qCAEEL,GACbH,KAAK,SAACC,GACaoE,SAASC,cAAc,cAC/BZ,UAAV,iFAGMlC,IAAAA,EAAU,CACd6D,SAAWpF,EAAIsH,SAAU,UAAW,SACpCjC,IAAKrF,EAAIuH,SAGXvE,EAAQmC,YAAY5D,OA9PWV,CAAAA,IAAAA,YAoQhB,MAAA,WAEjBmC,EAAQ6C,iBAAiBzB,SAASuB,eAAe,aAAc,MAAO,eAAe,GAE/E6B,IAAAA,EAAepD,SAASuC,cAAc,MAC5Ca,EAAajE,UAAUI,IAAI,aAErBlC,IAAAA,EAAO2C,SAASuC,cAAc,MACpClF,EAAKgC,UAAL,wEAEM/B,IAAAA,EAAS0C,SAASuC,cAAc,MACtCjF,EAAO+B,UAAP,0EAEM9B,IAAAA,EAASyC,SAASuC,cAAc,MACtChF,EAAO8B,UAAP,0EAEMgE,IAAAA,EAAUrD,SAASuC,cAAc,OACvCc,EAAQlE,UAAUI,IAAI,kBACtB8D,EAAQhE,UAAR,qNAEChC,CAAAA,EAAMC,EAAQC,GAAQE,QAAQ,SAAA6F,GAC7BF,EAAaV,YAAYY,KAGrBV,IAAAA,EAAQ5C,SAASC,cAAc,SACrC2C,EAAMW,aAAaH,EAAcR,EAAMzC,WAAW,IAE5CqD,IAAAA,EAAWxD,SAASC,cAAc,cACxCuD,EAASD,aAAaF,EAASG,EAASrD,WAAW,IAGnDvB,EAAQ6E,iBAGRzD,SAASuB,eAAe,aAAaxC,iBAAiB,QAAS,WAC7DH,EAAQ8E,4BAGV1D,SAASuB,eAAe,WAAWxC,iBAAiB,QAAS,WAC3D9C,QAAQC,IAAI,sBACZ0C,EAAQ+E,yBA5SuBlH,CAAAA,IAAAA,qBAgTP,MAAA,WACpBmH,IAAAA,EAAa5D,SAASkC,iBAAiB,oBACvCrD,EAAMmB,SAASkC,iBAAiB,iBAEhC9E,EAAU,CACdC,KAAMuG,EAAW,GAAGxD,MACpB9C,OAAQsD,SAASgD,EAAW,GAAGxD,OAC/B7C,OAAQqG,EAAW,GAAGxD,OAGxBzB,EAAajB,UAAUN,GAEvByB,EAAI,GAAGQ,UAAY,GACnBR,EAAI,GAAGQ,UAAY,GACnBR,EAAI,GAAGQ,UAAY,GAEnBR,EAAI,GAAGS,YAAclC,EAAQC,KAC7BwB,EAAI,GAAGS,YAAclC,EAAQE,OAC7BuB,EAAI,GAAGS,YAAclC,EAAQG,OAE7ByC,SAASC,cAAc,cAAcd,UAAU2B,OAAO,aACtDlC,EAAQiF,yBACFC,IAAAA,EAAS9D,SAASkC,iBAAiB,qBACzCtD,EAAQuD,aAAa2B,GACrBnF,EAAakC,qBAObjC,EAAQmC,YALQ,CACdC,SAAU,UACVC,IAAK,qCAIPrC,EAAQ6C,iBAAiBzB,SAASuB,eAAe,aAAc,IAAK,WAAW,KAhV9C9E,CAAAA,IAAAA,yBAmVH,MAAA,WACxBsH,IAAAA,EAAgB/D,SAASC,cAAc,mBAC7C8D,EAAcnE,WAAWyC,YAAY0B,KArVJtH,CAAAA,IAAAA,0BAwVF,MAAA,WACzBuH,IAAAA,EAAkBhE,SAASC,cAAc,cAC/C+D,EAAgBpE,WAAWyC,YAAY2B,GACvCpF,EAAQiF,yBACRjF,EAAQ6C,iBAAiBzB,SAASuB,eAAe,aAAc,IAAK,WAAW,KA5V9C9E,CAAAA,IAAAA,iBA+VX,MAAA,WAChBmH,IAAAA,EAAa5D,SAASkC,iBAAiB,oBACvCV,EAAQxB,SAASuB,eAAe,WAClClE,GAAO,EACPC,GAAS,EACTC,GAAS,EAEW,GAArBqG,EAAWK,QAEZL,EAAW,GAAG7E,iBAAiB,QAAS,WAEpC1B,EADEuG,EAAW,GAAGxD,QAAUwD,EAAW,GAAGnE,aAAa,SAKvDmE,EAAW,GAAG7E,iBAAiB,QAAS,WAKpCzB,IAHEsG,EAAW,GAAGxD,QAAUwD,EAAW,GAAGnE,aAAa,WAAab,EAAQsF,kBAAkBN,EAAW,GAAGxD,QAKxG/C,GAAQC,GAAUC,EACpBqB,EAAQ6C,iBAAiBD,EAAO,IAAK,WAAW,GAGhD5C,EAAQ6C,iBAAiBD,EAAO,MAAO,eAAe,KAI1DoC,EAAW,GAAG7E,iBAAiB,QAAS,WAEpCxB,EADEqG,EAAW,GAAGxD,QAAUwD,EAAW,GAAGnE,aAAa,SAMnDpC,GAAQC,GAAUC,EACpBqB,EAAQ6C,iBAAiBD,EAAO,IAAK,WAAW,GAGhD5C,EAAQ6C,iBAAiBD,EAAO,MAAO,eAAe,KAItDnE,GAAQC,GAAUC,EACpBqB,EAAQ6C,iBAAiBD,EAAO,IAAK,WAAW,GAGhD5C,EAAQ6C,iBAAiBD,EAAO,MAAO,eAAe,KAQvDnE,GAAQC,GAAUC,EACrBqB,EAAQ6C,iBAAiBD,EAAO,IAAK,WAAW,GAGhD5C,EAAQ6C,iBAAiBD,EAAO,MAAO,eAAe,KA5ZvB/E,CAAAA,IAAAA,oBAgaV0H,MAAAA,SAAAA,GACdzD,OAAAA,MAAMyD,KAAeA,EAAWC,SAAS,SAjajB3H,EAAhBmC,GAAgBnC,QAAAA,QAAAA;;ACQrC,aAbA,QAAA,kBACA,IAAA,EAAA,EAAA,QAAA,yBAYA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAVAmC,EAAQyF,QAAAA,kBAER/C,WAAW,WACL7C,aAAaqD,QAAQ,cACvBrD,aAAa6F,WAAW,YACxBrI,QAAQC,IAAI,uCACZD,QAAQC,IAAIuC,aAAaqD,QAAQ,eAElC,KAEH9B,SAASuB,eAAe,mBAAmBxC,iBAAiB,QAAS,WAC3DwF,EAAAA,QAAAA","file":"App.d2099650.js","sourceRoot":"../public","sourcesContent":["export const API = {\n  get: function(URL) {\n    return new Promise((resolve, reject) => {\n      fetch(URL)\n      .then(res => res.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch((error) => {\n        console.log(error);       \n      })\n    });\n  },\n\n  post: function(URL, data) {\n    return new Promise((resolve, reject) => {      \n      const options = {\n        method: 'POST',      \n        body: JSON.stringify(data)\n      }   \n      fetch(URL, options)\n      .then(res => res.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch((error) => {\n        console.log(error);       \n      })\n    });\n\n  }\n\n}\n\n","export default class CreateDatabase {\n  constructor(tableName, columnsName) {\n    this.Conn = new SQL.Database();        \n    this.tableName = tableName;\n    this.columnsName = columnsName;\n    this.CreateTable();\n  }\n\n  CreateTable() {\n    try {\n      const createTable = `create table ${this.tableName}(${this.columnsName[0]} text NOT NULL, ${this.columnsName[1]} int primary key, ${this.columnsName[2]} varchar(3) NOT NULL, CHECK (${this.columnsName[2]} in ('MCA','MSc')))`;\n   \n      this.Conn.run(createTable);\n      console.log(`${this.tableName} table has been created`);\n    }\n    catch(err) {\n      console.log(err.message);\n    }\n  }\n\n  InsertOne(student) {\n    try {\n      this.Conn.run(`insert into ${this.tableName} values(\"${student.name}\", ${student.rollno}, \"${student.course}\")`);\n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  InsertMany(students) {\n\n    students.forEach((student) => {\n      this.InsertOne(student);\n    })\n  }\n\n  GetRecordById(id) {\n    try{\n      const query = `select * from ${this.tableName} where rollno=${id}`;\n      const record = this.Conn.prepare(query);\n      if (!record.step()) {\n        console.log(\"No such record present in the table\");\n        return\n      }\n      \n      console.log(record.get());\n      \n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  GetRecordByName(name) {\n    try{\n      const query = `select * from ${this.tableName} where name=\"${name}\"`;\n      const record = this.Conn.prepare(query);\n      if (!record.step()) {\n        console.log(\"No such record present in the table\");\n        return\n      }\n      \n      while (record.step()) {\n        console.log(record.get());\n      }\n      \n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    \n  }\n\n  GetAllRecords() {\n    try {\n      const query = `select * from ${this.tableName}`;      \n      const records = this.Conn.prepare(query);\n      var students = []\n      while (records.step()) {      \n        const record = records.get()\n        let student = {\n          name: record[0],\n          rollno: record[1],\n          course: record[2]\n        }\n\n        students.push(student);\n      }            \n      return students;\n    } \n    catch(error) {\n      console.log(error.message);\n    }\n    \n  }\n\n  UpdateRow(id, updatingString) {\n    try {\n     \n      const colAndValue = updatingString.split(\"=\");\n      const columnName = colAndValue[0];\n      const updatingValue =colAndValue[1];      \n  \n      const query = `update ${this.tableName} set ${columnName}=${updatingValue} where rollno=${id}`;\n      console.log(query);\n      const record = this.Conn.exec(query);\n    }\n    catch(err) {\n      console.log(err.message);\n      return \"\"\n    }\n    \n\n  }\n\n  UpdateLocalStorage() {\n    const students = this.GetAllRecords();\n    if (students == \"\") {\n      console.log(\"No record is available\");      \n    }\n    else {      \n      localStorage.setItem(\"students\",JSON.stringify(students));      \n    }\n  }\n\n}","import { API } from '../API';\nimport CreateDatabase from './CreateDatabase';\n\nlet studentTable = \"\";\n\nexport default class Student extends CreateDatabase{\n\n  constructor(tableName, columnsName) {   \n    super(tableName, columnsName);\n  }\n  \n  static ChangeColums(tds) {\n    tds.forEach((td) => {\n      td.addEventListener(\"click\", (e) => {\n        Student.HandleClickedEvent(e.target)\n        if(!e.target.classList.contains(\"changing\")) {           \n          e.target.innerHTML = `<input type=\"text\" value=\"${e.target.textContent}\" id=\"inputText\" required>`;\n          e.target.innerHTML += `<div class=\"action-buttons\"><button id=\"save\" class=\"success\" disabled><i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i></button><button id=\"cancel\" class=\"danger\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n          </button></div>`;\n          e.target.classList.add(\"changing\");\n        }\n      })                \n    })\n  }\n\n  static HandleClickedEvent(clickedElement) {\n        \n    if (clickedElement != null && clickedElement.getAttribute(\"value\")) {\n      Student.IsModified();     \n      return\n    }\n    else if((clickedElement && clickedElement.getAttribute(\"id\")==\"save\") || ((clickedElement.tagName == \"I\") &&  clickedElement.parentNode.getAttribute(\"id\")==\"save\")) {\n      Student.Save()\n    }\n    else if ((clickedElement && clickedElement.getAttribute(\"id\")==\"cancel\") || ((clickedElement.tagName == \"I\") &&  clickedElement.parentNode.getAttribute(\"id\")==\"cancel\")) {\n      Student.Cancel()      \n    }\n    else if(clickedElement.tagName==\"TD\" && !clickedElement.classList.contains(\"changing\")) {      \n      Student.NotifyIfNotSave();\n      Student.Cancel()\n    }\n    \n  }\n  \n  static NotifyIfNotSave() {\n    const td = document.querySelector(\"tbody td.changing\");\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    if (input.value != input.getAttribute(\"value\")) {\n      if(confirm(\"Changes are not saved, do you want to save?\")) {\n        Student.Save();\n      }\n      else {\n        Student.Cancel();\n      }\n    }\n    \n  }\n\n  static Save() {\n\n    const td = document.querySelector(\"tbody td.changing\");\n    let index = -1\n\n    td.parentNode.childNodes.forEach((row, itemIndex) => {\n      if (row.classList.contains(\"changing\")) {\n        index = itemIndex;        \n      }\n    });\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    \n\n    let updatedValue =``;\n\n    if(isNaN(input.value)) {\n      updatedValue = `${studentTable.columnsName[index]}=\"${input.value}\"`;\n      studentTable.UpdateRow(parseInt(td.parentNode.childNodes[1].textContent), updatedValue);      \n    }\n    else {\n      updatedValue = `${studentTable.columnsName[index]}=${input.value}`;      \n      studentTable.UpdateRow(parseInt(input.getAttribute(\"value\")), updatedValue);\n    }\n   \n    studentTable.UpdateLocalStorage();\n\n    \n    td.textContent = input.value;\n    td.classList.remove(\"changing\");\n\n    const message = {\n      addClass: \"success\",\n      msg: \"Record has been successfully updated\"      \n    }\n\n    Student.ShowMessage(message)   \n  }\n\n  static Cancel() {\n    const td = document.querySelector(\"tbody td.changing\");\n    if(td == null)\n      return\n    const input = td.childNodes[0];\n    td.textContent = input.getAttribute(\"value\");\n    td.classList.remove(\"changing\");\n\n\n    if(input.value == input.getAttribute(\"value\"))\n      return;\n\n    const message = {\n      addClass: \"danger\",\n      msg: \"You cancelled updating record\"      \n    }\n\n    Student.ShowMessage(message)\n  }\n\n  static ShowMessage(message) {\n    const msgBox = document.querySelector(\".msg-box\");\n    msgBox.classList.add(message.addClass);\n    msgBox.innerHTML = message.msg;\n    \n    msgBox.style.display = \"block\";\n    msgBox.style.opacity = \"1\";\n\n    setTimeout(()=> {\n      msgBox.style.opacity = \"0\";\n      msgBox.classList.remove(message.addClass);\n      msgBox.style.display = \"none\";\n    },2000);\n  }\n\n  static IsModified() {\n    const input = document.getElementById(\"inputText\");\n    const btnSc = document.getElementById(\"save\");\n\n    if (input) {\n      input.addEventListener(\"keyup\", ()=> {\n        if(input.value !== input.getAttribute(\"value\")) {\n          Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n        }\n        else {          \n          Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true);         \n        }\n      })\n    }\n  }\n\n  static ButtonProperties(btnSc, opacity, cursorMode, isDisabled) {\n    btnSc.style.opacity = opacity;\n    btnSc.style.cursor = cursorMode;\n    btnSc.disabled = isDisabled;\n  }\n  \n  static LoadStudentData() {\n    \n    studentTable = new Student(\"students\", [\"name\", \"rollno\", \"course\"]); // (tablename, [columnname1, ..., columnnamen])\n    const URL = \"http://localhost:8080/api/students\";\n\n    \n    if (localStorage.getItem(\"students\")) {      \n      studentTable.InsertMany(JSON.parse(localStorage.getItem(\"students\"))); // load into sql.js\n      Student.InsertIntoTables(JSON.parse(localStorage.getItem(\"students\"))); // load into webpage\n      console.log(\"Loading from localStorage\");\n      const tds = document.querySelectorAll(\"#student-table td\");\n      Student.ChangeColums(tds);           \n    }\n      \n    else {\n\n      API.get(URL)\n      .then((data) => {        \n        localStorage.setItem(\"students\",JSON.stringify(data)); \n        studentTable.InsertMany(data);                 \n        Student.InsertIntoTables(studentTable.GetAllRecords());\n        console.log(\"Loading from API\");\n        const tds = document.querySelectorAll(\"#student-table td\");\n        Student.ChangeColums(tds);       \n      });\n    }   \n        \n  }\n\n  static InsertIntoTables(data) {\n    const section = document.getElementById(\"student-table\");\n    document.querySelector(\".wrapper-loader\").parentNode.removeChild(document.querySelector(\".wrapper-loader\"));\n      \n    const thead = document.createElement(\"thead\");    \n    Student.LoadHeading().forEach(tr => {\n      thead.appendChild(tr);      \n    })\n    section.appendChild(thead);\n    document.getElementById(\"addNewRow\").addEventListener(\"click\", () => {\n      Student.AddNewRow();\n    })\n\n    const tbody = document.createElement(\"tbody\");\n\n    data.forEach((student) => {\n      tbody.appendChild(Student.LoadStudentInfo(student));\n    })\n    section.appendChild(tbody);\n\n   \n  }\n\n  static LoadStudentInfo(student) {    \n   \n    const row = document.createElement(\"tr\");\n\n    const name = document.createElement(\"td\")\n    name.textContent = student.name;\n\n    const rollNo = document.createElement(\"td\");\n    rollNo.textContent = student.rollno;\n\n    const course = document.createElement(\"td\");\n    course.textContent = student.course;\n\n    [name, rollNo, course].forEach((el) => {\n      row.appendChild(el);\n    })\n\n    return row;\n  }\n\n  static LoadHeading() {\n    const row = document.createElement(\"tr\");    \n    const headers = studentTable.columnsName;\n      \n    headers.forEach(header => {\n      var td = document.createElement(\"th\");\n      td.textContent = header;\n      row.appendChild(td);\n    });  \n\n    const addRow = document.createElement(\"tr\");   \n    addRow.innerHTML = `<th></th><th><button id=\"addNewRow\"><span><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></span></button></th><th></th>`;\n        \n    return [row, addRow]\n  }\n\n  static SendStudentsData() {\n    const URL = \"http://localhost:8080/api/students\";\n    const data = studentTable.GetAllRecords();    \n    API.post(URL, data)\n    .then((res) => {      \n      const container = document.querySelector(\".container\");\n      container.innerHTML = `<h3>Record is successfully uploaded..</h3><div class=\"msg-box\"> \n      </div>`\n      \n      const message = {\n        addClass: (res.response? \"success\": \"danger\"),\n        msg: res.content     \n      }\n\n      Student.ShowMessage(message)\n  \n    })    \n\n  }\n\n  static AddNewRow() {\n\n    Student.ButtonProperties(document.getElementById(\"addNewRow\"), \"0.5\", \"not-allowed\", true);\n\n    const insertNewRow = document.createElement(\"tr\");\n    insertNewRow.classList.add(\"inserting\")\n\n    const name = document.createElement(\"td\")\n    name.innerHTML = `<input type=\"text\" placeholder=\"Please enter name\" value=\"\" required>`;\n\n    const rollno = document.createElement(\"td\")\n    rollno.innerHTML = `<input type=\"text\" placeholder=\"Please enter rollno\" value=\"\" required>`;\n\n    const course = document.createElement(\"td\")\n    course.innerHTML = `<input type=\"text\" placeholder=\"Please enter course\" value=\"\" required>`;\n\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"action-buttons\");\n    buttons.innerHTML = `<button id=\"saveNew\" class=\"success\" disabled><i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i></button><button id=\"cancelNew\" class=\"danger\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i></button>`;\n\n    [name, rollno, course].forEach(child => {\n      insertNewRow.appendChild(child);\n    })\n\n    const tbody = document.querySelector(\"tbody\");\n    tbody.insertBefore(insertNewRow, tbody.childNodes[0])  \n\n    const tableBox = document.querySelector(\".table-box\")\n    tableBox.insertBefore(buttons, tableBox.childNodes[0]);\n    \n\n    Student.IsModifiedText()\n\n    \n    document.getElementById(\"cancelNew\").addEventListener(\"click\", () => {\n      Student.RemoveInsertingElements();\n    })\n\n    document.getElementById(\"saveNew\").addEventListener(\"click\", () => {\n      console.log(\"Clicked on saveNew\");      \n      Student.SaveInsertedValues();\n    })\n  }\n\n  static SaveInsertedValues() {    \n    const textFields = document.querySelectorAll(\".inserting input\");\n    const tds = document.querySelectorAll(\".inserting td\");\n    \n    const student = {\n      name: textFields[0].value,\n      rollno: parseInt(textFields[1].value),\n      course: textFields[2].value\n    }\n\n    studentTable.InsertOne(student);\n\n    tds[0].innerHTML = \"\";\n    tds[1].innerHTML = \"\";\n    tds[2].innerHTML = \"\";\n\n    tds[0].textContent = student.name;\n    tds[1].textContent = student.rollno;\n    tds[2].textContent = student.course;\n\n    document.querySelector(\".inserting\").classList.remove(\"inserting\");\n    Student.RemoveInsertingButtons();\n    const newtds = document.querySelectorAll(\"#student-table td\");\n    Student.ChangeColums(newtds);\n    studentTable.UpdateLocalStorage();\n\n    const message = {\n      addClass: \"success\",\n      msg: \"New record is successfully added\"      \n    }\n\n    Student.ShowMessage(message)\n    Student.ButtonProperties(document.getElementById(\"addNewRow\"), \"1\", \"pointer\", false);\n  }\n\n  static RemoveInsertingButtons() {\n    const cancelButtons = document.querySelector(\".action-buttons\");\n    cancelButtons.parentNode.removeChild(cancelButtons);\n  }\n\n  static RemoveInsertingElements() {\n    const cancelInserting = document.querySelector(\".inserting\");\n    cancelInserting.parentNode.removeChild(cancelInserting);\n    Student.RemoveInsertingButtons();\n    Student.ButtonProperties(document.getElementById(\"addNewRow\"), \"1\", \"pointer\", false);\n  }\n\n  static IsModifiedText() {\n    const textFields = document.querySelectorAll(\".inserting input\")\n    const btnSc = document.getElementById(\"saveNew\");\n    let name = false\n    let rollno = false\n    let course = false\n\n    if(textFields.length == 3) {\n\n      textFields[0].addEventListener(\"keyup\", ()=> {\n        if (textFields[0].value === textFields[0].getAttribute(\"value\"))\n          name = false\n        else \n          name = true\n\n        textFields[1].addEventListener(\"keyup\", ()=> {\n          //if (textFields[1].value === textFields[1].getAttribute(\"value\") || isNaN(textFields[1].value) || textFields[1].value.includes('.'))\n          if (textFields[1].value === textFields[1].getAttribute(\"value\") || !Student.IsValidRollNumber(textFields[1].value))\n            rollno = false\n          else \n            rollno = true\n\n          if (name && rollno && course) {\n            Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n          }\n          else {\n            Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true);\n          }\n        })\n\n        textFields[2].addEventListener(\"keyup\", ()=> {\n          if (textFields[2].value === textFields[2].getAttribute(\"value\"))\n            course = false\n          else \n            course = true\n\n            \n          if (name && rollno && course) {\n            Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n          }\n          else {\n            Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true);\n          }\n        })\n\n        if (name && rollno && course) {\n          Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n        }\n        else {\n          Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true);\n        }\n\n      })\n\n      \n    }\n\n    if ( name && rollno && course) {\n      Student.ButtonProperties(btnSc, \"1\", \"pointer\", false);\n    }\n    else {\n      Student.ButtonProperties(btnSc, \"0.5\", \"not-allowed\", true); \n    }\n  }\n\n  static IsValidRollNumber(rollnumber) {\n    return ((isNaN(rollnumber) || rollnumber.includes('.')) ? false : true)\n  }\n\n}","import './css/main.css';\nimport Student from './components/Student';\n\nStudent.LoadStudentData();\n\nsetTimeout(() => {\n  if (localStorage.getItem(\"students\")) {\n    localStorage.removeItem(\"students\")\n    console.log(\"removed element from localStorage..\");\n    console.log(localStorage.getItem(\"students\"));\n  }\n}, 1000*60);\n\ndocument.getElementById(\"upload-students\").addEventListener(\"click\", () => {\n  Student.SendStudentsData()\n});\n\n"]}